{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\React\\\\tic-tac-toe\\\\TicTacToe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board\";\nimport \"./App.css\"; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const [isBotEnabled, setIsBotEnabled] = useState(false);\n  const [gameMode, setGameMode] = useState(null);\n  const handleClick = index => {\n    if (squares[index] || calculateWinner(squares) || gameMode === \"bot\" && !isXNext) return;\n    const newSquares = squares.slice();\n    newSquares[index] = isXNext ? \"X\" : \"O\";\n    setSquares(newSquares);\n    setIsXNext(!isXNext);\n  };\n  const result = calculateWinner(squares);\n  const winner = result ? result.winner : null;\n  const winningLine = result ? result.winningLine : [];\n  const status = winner ? `Winner: ${winner}` : `Player: ${isXNext ? \"X\" : \"O\"}'s Turn`;\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setIsXNext(true);\n  };\n  useEffect(() => {\n    if (!isXNext && isBotEnabled && !calculateWinner(squares)) {\n      setTimeout(() => {\n        const botMove = calculateBotMove(squares);\n        if (botMove !== null) {\n          const newSquares = squares.slice();\n          newSquares[botMove] = \"O\";\n          setSquares(newSquares);\n          setIsXNext(true);\n        }\n      }, 1000);\n    }\n  }, [isXNext, isBotEnabled, squares]);\n  const chooseGameMode = mode => {\n    setGameMode(mode);\n    setIsBotEnabled(mode === \"bot\");\n    resetGame();\n  };\n  const returnToGameModeSelection = () => {\n    setGameMode(null);\n    resetGame();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: gameMode === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Select Game Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => chooseGameMode(\"bot\"),\n        className: \"mode-button\",\n        children: \"Play with Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => chooseGameMode(\"friend\"),\n        className: \"mode-button\",\n        children: \"Play with Friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Tic Tac Toe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squares: squares,\n        onClick: handleClick,\n        winningLine: winningLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: resetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: returnToGameModeSelection,\n        children: \"Change Game Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oWp0T01yL+iLq4bhU7Wv51p5zHg=\");\n_c = App;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let line of lines) {\n    const [a, b, c] = line;\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        winningLine: line\n      }; // Return winner and winning line\n    }\n  }\n  return null;\n}\nconst calculateBotMove = squares => {\n  const emptySquares = squares.map((value, index) => value === null ? index : null).filter(value => value !== null);\n  return emptySquares.length > 0 ? emptySquares[Math.floor(Math.random() * emptySquares.length)] : null;\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Board","jsxDEV","_jsxDEV","App","_s","squares","setSquares","Array","fill","isXNext","setIsXNext","isBotEnabled","setIsBotEnabled","gameMode","setGameMode","handleClick","index","calculateWinner","newSquares","slice","result","winner","winningLine","status","resetGame","setTimeout","botMove","calculateBotMove","chooseGameMode","mode","returnToGameModeSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","lines","line","a","b","c","emptySquares","map","value","filter","length","Math","floor","random","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/React/tic-tac-toe/TicTacToe/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board\";\nimport \"./App.css\"; // Import the CSS file\n\nfunction App() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const [isBotEnabled, setIsBotEnabled] = useState(false);\n  const [gameMode, setGameMode] = useState(null);\n\n  const handleClick = (index) => {\n    if (\n      squares[index] ||\n      calculateWinner(squares) ||\n      (gameMode === \"bot\" && !isXNext)\n    )\n      return;\n\n    const newSquares = squares.slice();\n    newSquares[index] = isXNext ? \"X\" : \"O\";\n    setSquares(newSquares);\n    setIsXNext(!isXNext);\n  };\n\n  const result = calculateWinner(squares);\n  const winner = result ? result.winner : null;\n  const winningLine = result ? result.winningLine : [];\n\n  const status = winner\n    ? `Winner: ${winner}`\n    : `Player: ${isXNext ? \"X\" : \"O\"}'s Turn`;\n\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setIsXNext(true);\n  };\n\n  useEffect(() => {\n    if (!isXNext && isBotEnabled && !calculateWinner(squares)) {\n      setTimeout(() => {\n        const botMove = calculateBotMove(squares);\n        if (botMove !== null) {\n          const newSquares = squares.slice();\n          newSquares[botMove] = \"O\";\n          setSquares(newSquares);\n          setIsXNext(true);\n        }\n      }, 1000);\n    }\n  }, [isXNext, isBotEnabled, squares]);\n\n  const chooseGameMode = (mode) => {\n    setGameMode(mode);\n    setIsBotEnabled(mode === \"bot\");\n    resetGame();\n  };\n\n  const returnToGameModeSelection = () => {\n    setGameMode(null);\n    resetGame();\n  };\n\n  return (\n    <div className=\"game-container\">\n      {gameMode === null ? (\n        <div className=\"mode-selection\">\n          <h1 className=\"title\">Select Game Mode</h1>\n          <button onClick={() => chooseGameMode(\"bot\")} className=\"mode-button\">\n            Play with Bot\n          </button>\n          <button\n            onClick={() => chooseGameMode(\"friend\")}\n            className=\"mode-button\"\n          >\n            Play with Friend\n          </button>\n        </div>\n      ) : (\n        <div className=\"game-board\">\n          <h1 className=\"title\">Tic Tac Toe</h1>\n          <div className=\"status\">{status}</div>\n          <Board\n            squares={squares}\n            onClick={handleClick}\n            winningLine={winningLine}\n          />\n\n          <button className=\"reset-button\" onClick={resetGame}>\n            Reset Game\n          </button>\n          <button className=\"back-button\" onClick={returnToGameModeSelection}>\n            Change Game Mode\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let line of lines) {\n    const [a, b, c] = line;\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], winningLine: line }; // Return winner and winning line\n    }\n  }\n  return null;\n}\n\nconst calculateBotMove = (squares) => {\n  const emptySquares = squares\n    .map((value, index) => (value === null ? index : null))\n    .filter((value) => value !== null);\n\n  return emptySquares.length > 0\n    ? emptySquares[Math.floor(Math.random() * emptySquares.length)]\n    : null;\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC3D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMiB,WAAW,GAAIC,KAAK,IAAK;IAC7B,IACEX,OAAO,CAACW,KAAK,CAAC,IACdC,eAAe,CAACZ,OAAO,CAAC,IACvBQ,QAAQ,KAAK,KAAK,IAAI,CAACJ,OAAQ,EAEhC;IAEF,MAAMS,UAAU,GAAGb,OAAO,CAACc,KAAK,CAAC,CAAC;IAClCD,UAAU,CAACF,KAAK,CAAC,GAAGP,OAAO,GAAG,GAAG,GAAG,GAAG;IACvCH,UAAU,CAACY,UAAU,CAAC;IACtBR,UAAU,CAAC,CAACD,OAAO,CAAC;EACtB,CAAC;EAED,MAAMW,MAAM,GAAGH,eAAe,CAACZ,OAAO,CAAC;EACvC,MAAMgB,MAAM,GAAGD,MAAM,GAAGA,MAAM,CAACC,MAAM,GAAG,IAAI;EAC5C,MAAMC,WAAW,GAAGF,MAAM,GAAGA,MAAM,CAACE,WAAW,GAAG,EAAE;EAEpD,MAAMC,MAAM,GAAGF,MAAM,GACjB,WAAWA,MAAM,EAAE,GACnB,WAAWZ,OAAO,GAAG,GAAG,GAAG,GAAG,SAAS;EAE3C,MAAMe,SAAS,GAAGA,CAAA,KAAM;IACtBlB,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/BE,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAEDX,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,OAAO,IAAIE,YAAY,IAAI,CAACM,eAAe,CAACZ,OAAO,CAAC,EAAE;MACzDoB,UAAU,CAAC,MAAM;QACf,MAAMC,OAAO,GAAGC,gBAAgB,CAACtB,OAAO,CAAC;QACzC,IAAIqB,OAAO,KAAK,IAAI,EAAE;UACpB,MAAMR,UAAU,GAAGb,OAAO,CAACc,KAAK,CAAC,CAAC;UAClCD,UAAU,CAACQ,OAAO,CAAC,GAAG,GAAG;UACzBpB,UAAU,CAACY,UAAU,CAAC;UACtBR,UAAU,CAAC,IAAI,CAAC;QAClB;MACF,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC,EAAE,CAACD,OAAO,EAAEE,YAAY,EAAEN,OAAO,CAAC,CAAC;EAEpC,MAAMuB,cAAc,GAAIC,IAAI,IAAK;IAC/Bf,WAAW,CAACe,IAAI,CAAC;IACjBjB,eAAe,CAACiB,IAAI,KAAK,KAAK,CAAC;IAC/BL,SAAS,CAAC,CAAC;EACb,CAAC;EAED,MAAMM,yBAAyB,GAAGA,CAAA,KAAM;IACtChB,WAAW,CAAC,IAAI,CAAC;IACjBU,SAAS,CAAC,CAAC;EACb,CAAC;EAED,oBACEtB,OAAA;IAAK6B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5BnB,QAAQ,KAAK,IAAI,gBAChBX,OAAA;MAAK6B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B9B,OAAA;QAAI6B,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3ClC,OAAA;QAAQmC,OAAO,EAAEA,CAAA,KAAMT,cAAc,CAAC,KAAK,CAAE;QAACG,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAEtE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTlC,OAAA;QACEmC,OAAO,EAAEA,CAAA,KAAMT,cAAc,CAAC,QAAQ,CAAE;QACxCG,SAAS,EAAC,aAAa;QAAAC,QAAA,EACxB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,gBAENlC,OAAA;MAAK6B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB9B,OAAA;QAAI6B,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtClC,OAAA;QAAK6B,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAET;MAAM;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACtClC,OAAA,CAACF,KAAK;QACJK,OAAO,EAAEA,OAAQ;QACjBgC,OAAO,EAAEtB,WAAY;QACrBO,WAAW,EAAEA;MAAY;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eAEFlC,OAAA;QAAQ6B,SAAS,EAAC,cAAc;QAACM,OAAO,EAAEb,SAAU;QAAAQ,QAAA,EAAC;MAErD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTlC,OAAA;QAAQ6B,SAAS,EAAC,aAAa;QAACM,OAAO,EAAEP,yBAA0B;QAAAE,QAAA,EAAC;MAEpE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChC,EAAA,CA7FQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AA+FZ,SAASc,eAAeA,CAACZ,OAAO,EAAE;EAChC,MAAMkC,KAAK,GAAG,CACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;EAED,KAAK,IAAIC,IAAI,IAAID,KAAK,EAAE;IACtB,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGH,IAAI;IACtB,IAAInC,OAAO,CAACoC,CAAC,CAAC,IAAIpC,OAAO,CAACoC,CAAC,CAAC,KAAKpC,OAAO,CAACqC,CAAC,CAAC,IAAIrC,OAAO,CAACoC,CAAC,CAAC,KAAKpC,OAAO,CAACsC,CAAC,CAAC,EAAE;MACxE,OAAO;QAAEtB,MAAM,EAAEhB,OAAO,CAACoC,CAAC,CAAC;QAAEnB,WAAW,EAAEkB;MAAK,CAAC,CAAC,CAAC;IACpD;EACF;EACA,OAAO,IAAI;AACb;AAEA,MAAMb,gBAAgB,GAAItB,OAAO,IAAK;EACpC,MAAMuC,YAAY,GAAGvC,OAAO,CACzBwC,GAAG,CAAC,CAACC,KAAK,EAAE9B,KAAK,KAAM8B,KAAK,KAAK,IAAI,GAAG9B,KAAK,GAAG,IAAK,CAAC,CACtD+B,MAAM,CAAED,KAAK,IAAKA,KAAK,KAAK,IAAI,CAAC;EAEpC,OAAOF,YAAY,CAACI,MAAM,GAAG,CAAC,GAC1BJ,YAAY,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGP,YAAY,CAACI,MAAM,CAAC,CAAC,GAC7D,IAAI;AACV,CAAC;AAED,eAAe7C,GAAG;AAAC,IAAAmC,EAAA;AAAAc,YAAA,CAAAd,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}